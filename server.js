const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const fs = require('fs').promises; // Use fs.promises for async file operations

const app = express();
const port = 3000;

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Endpoint to handle requests from NewNotebookPageInitializer.js
app.post('/initialize', async (req, res) => {
    const { htmlContent, fileName } = req.body;

    // Ensure the 'Notebook' directory exists, create it if it doesn't
    const notebookDir = path.join(__dirname, 'Notebook');
    try {
        await fs.mkdir(notebookDir, { recursive: true });
    } catch (error) {
        console.error('Error creating Notebook directory:', error);
        return res.status(500).send('Error creating Notebook directory');
    }

    // Use the provided file name, or default to 'new-notebook-page.html'
    const sanitizedFileName = fileName.replace(/[^a-z0-9]/gi, '_').toLowerCase(); // Sanitize the file name
    const filePath = path.join(notebookDir, `${sanitizedFileName}.html`);

    try {
        await fs.writeFile(filePath, htmlContent);
        console.log(`HTML file "${filePath}" has been successfully created!`);
        res.send('HTML file has been created successfully');
    } catch (error) {
        console.error('Error writing HTML file:', error);
        res.status(500).send('Error creating HTML file');
    }
});

// POST endpoint to generate the file
app.post('/generate', (req, res) => {
    // Generate the HTML content (for demonstration purposes)
    const htmlContent = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Generated HTML File</title>
    </head>
    <body>
        <h1>Hello, this is a generated HTML file!</h1>
        <p>This file was generated by a Node.js script.</p>
    </body>
    </html>
    `;

    // Path where the HTML file will be temporarily stored
    const filePath = path.join(__dirname, 'generated.html');

    // Write the HTML content to a file
    fs.writeFile(filePath, htmlContent, (err) => {
        if (err) {
            console.error('Error writing HTML file:', err);
            res.status(500).send('Error generating file');
        } else {
            console.log(`HTML file "${filePath}" has been successfully generated!`);
            // Send the generated file back to the client as a response
            res.download(filePath, 'generated.html', (err) => {
                if (err) {
                    console.error('Error sending file:', err);
                    res.status(500).send('Error sending file');
                } else {
                    // Delete the generated file after sending
                    fs.unlink(filePath, (err) => {
                        if (err) {
                            console.error('Error deleting file:', err);
                        } else {
                            console.log(`Deleted file "${filePath}"`);
                        }
                    });
                }
            });
        }
    });
});

// Function to run a script and return a promise
function runScript(script) {
    return new Promise((resolve, reject) => {
        exec(`node ${script}`, (err, stdout, stderr) => {
            if (err) {
                console.error(`Error running ${script}: ${stderr}`);
                reject(err);
                return;
            }
            console.log(`${script} output: ${stdout}`);
            resolve();
        });
    });
}

// Run GenerateNodes.js, GenerateEdges.js, and GenerateRegions.js in sequence
(async () => {
    try {
        await runScript('GenerateNodes.js');
        await runScript('GenerateEdges.js');
        await runScript('GenerateRegions.js');
        console.log('All scripts ran successfully.');

        // Serve static files from the public directory with correct MIME types
        app.use(express.static('public'));

        // Ensure JavaScript files have the correct MIME type
        app.get('/GeneratedNodes.js', (req, res) => {
            res.type('application/javascript');
            res.sendFile(path.join(__dirname, 'public', 'GeneratedNodes.js'));
        });

        app.get('/GeneratedEdges.js', (req, res) => {
            res.type('application/javascript');
            res.sendFile(path.join(__dirname, 'public', 'GeneratedEdges.js'));
        });

        app.get('/GeneratedRegions.js', (req, res) => {
            res.type('application/javascript');
            res.sendFile(path.join(__dirname, 'public', 'GeneratedRegions.js'));
        });

        // Serve index.html
        app.get('/', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
        });

        // Endpoint to handle updates to GraphStyles.js
        app.post('/updateGraphStyles', express.json(), async (req, res) => {
            const newStyles = req.body.styles; // Assuming the request body contains new styles
            const stylesFilePath = path.join(__dirname, 'public', 'GraphStyles.js');

            try {
                // Read current styles file
                let currentStyles = await fs.readFile(stylesFilePath, 'utf8');

                // Modify styles as needed (example: replace all occurrences of a specific style property)
                // Example: replace all occurrences of 'background-color: #66ccff;' with new style
                currentStyles = currentStyles.replace(/background-color: #66ccff;/g, newStyles);

                // Write modified styles back to file
                await fs.writeFile(stylesFilePath, currentStyles, 'utf8');
                
                res.status(200).send('Graph styles updated successfully.');
            } catch (error) {
                console.error('Error updating GraphStyles.js:', error);
                res.status(500).send('Failed to update graph styles.');
            }
        });

        app.listen(port, () => {
            console.log(`Server is running at http://localhost:${port}`);
        });
    } catch (error) {
        console.error('Failed to run scripts:', error);
    }
})();
